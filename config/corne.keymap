/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL  20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        /*
        Home Row Mods

            - tap: &kp <PARAM_2>
            - hold: &kp <PARAM_1>

            Example: &hrml LCMD T
        */

        /omit-if-no-ref/


        /omit-if-no-ref/

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        mom_toggle: mom_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "MOM_TOGGLE";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_hold_preferred: lt_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD_PREFERRED";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        //LangRu {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <0 1>;
        //    timeout-ms = <20>;
        //};
        //LangUs {
        //   bindings = <&kp LG(F12)>;
        //    key-positions = <10 11>;
        //    timeout-ms = <20>;
        //};
        //LangRuL {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <36 38>;
        //    timeout-ms = <20>;
        //};
        //LangUsL {
        //    bindings = <&kp LG(F12)>;
        //    key-positions = <39 41>;
        //    timeout-ms = <20>;
        //};

        RectangleKey {
            bindings = <&mo 7>;
            key-positions = <2 3>;
            layers = <0>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB     &kp Q              &kp W                &kp E                       &kp R                       &kp T        &kp Y             &kp U                &kp I             &kp O                 &kp P                      &kp BACKSPACE
&kp ESCAPE  &hmr LEFT_SHIFT A  &hmr LEFT_CONTROL S  &hmr LEFT_ALT D             &hmr LEFT_COMMAND F         &kp G        &kp H             &hmr LEFT_COMMAND J  &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr LEFT_SHIFT SEMICOLON  &lt 4 SQT
&kp GRAVE   &lt 2 Z            &kp X                &kp C                       &kp V                       &kp B        &kp N             &kp M                &kp COMMA         &kp DOT               &lt 2 SLASH                &kp BACKSLASH
                                                    &mt LEFT_COMMAND BACKSPACE  &lt_hold_preferred 3 SPACE  &kp ENTER    &mt RSHIFT ENTER  &mo 2                &lt 1 BACKSPACE
            >;

            label = "base layer";
        };

        ARROWS {
            label = "arrows";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &none             &none     &kp UP_ARROW  &none      &none  &none
&trans  &trans  &trans  &trans  &trans  &trans    &kp LA(UP_ARROW)  &kp LEFT  &kp DOWN      &kp RIGHT  &none  &none
&trans  &trans  &trans  &trans  &trans  &trans    &kp LA(DOWN)      &none     &none         &none      &none  &none
                        &trans  &trans  &trans    &trans            &trans    &trans
            >;
        };

        NAV {
            bindings = <
&trans  &none           &none             &mmv MOVE_UP    &none             &none        &none      &none             &mmv MOVE_UP    &none             &none           &none
&trans  &none           &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &none        &none      &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &none           &none
&trans  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT    &kp LEFT_COMMAND  &mkp MCLK    &mkp MCLK  &kp LEFT_COMMAND  &kp LEFT_ALT    &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none
                                          &mo 6           &mkp LCLK         &mkp RCLK    &mkp RCLK  &mkp LCLK         &mo 6
            >;

            label = "navigation";
        };

        NUM {
            bindings = <
&trans  &none         &kp LEFT_PARENTHESIS  &kp UP_ARROW  &kp RIGHT_PARENTHESIS  &none               &none      &kp N7        &kp N8        &kp N9        &none         &kp BACKSPACE
&trans  &none         &kp LEFT              &kp DOWN      &kp RIGHT              &kp LA(UP_ARROW)    &kp PLUS   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &none
&none   &kp CAPSLOCK  &none                 &none         &none                  &kp LA(DOWN)        &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &none
                                            &trans        &none                  &kp ENTER           &kp ENTER  &lt 5 PERIOD  &kp N0
            >;

            label = "numpad layer";
        };

        SYS {
            bindings = <
&none  &none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &none             &soft_off  &pw                   &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT  &none
&none  &none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none             &none      &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP    &none             &none       &none
&none  &none  &none          &none          &bt BT_CLR     &bt BT_CLR_ALL    &none      &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN  &none             &none       &none
                             &none          &none          &none             &none      &none                 &kp LS(LEFT_ALT)
            >;

            label = "system";
        };

        SYM {
            label = "symbol layer";
            bindings = <
&trans      &none   &kp LEFT_PARENTHESIS  &kp PLUS   &kp RIGHT_PARENTHESIS   &none              &none      &kp LEFT_BRACKET  &kp EQUAL       &kp RIGHT_BRACKET  &none      &kp BACKSPACE
&kp ESCAPE  &kp AT  &kp LESS_THAN         &kp MINUS  &kp GREATER_THAN        &kp EXCLAMATION    &kp GRAVE  &kp LEFT_BRACE    &kp UNDERSCORE  &kp RIGHT_BRACE    &kp TILDE  &none
&none       &none   &kp HASH              &kp PIPE   &kp DOLLAR              &none              &none      &kp PERCENT       &kp AMPS        &kp CARET          &none      &none
                                          &trans     &mt LEFT_COMMAND SPACE  &kp ENTER          &kp ENTER  &none             &kp BACKSPACE
            >;
        };

        SCROLL {
            bindings = <
&none  &none  &none            &msc SCRL_DOWN  &none           &none    &none  &none            &msc SCRL_DOWN  &none           &none  &none
&none  &none  &msc SCRL_RIGHT  &msc SCRL_UP    &msc SCRL_LEFT  &none    &none  &msc SCRL_RIGHT  &msc SCRL_UP    &msc SCRL_LEFT  &none  &none
&none  &none  &none            &none           &none           &none    &none  &none            &none           &none           &none  &none
                               &none           &none           &none    &none  &none            &none
            >;

            label = "scroll layer";
        };

        REC {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp LG(LA(LC(LS(R))))  &kp LG(LA(LS(LC(R))))  &kp LG(LA(LC(LS(M))))  &kp LG(LA(LC(LS(T))))  &none  &none
&none  &none  &none  &none  &none  &none    &kp LC(LA(LS(LG(O))))  &kp LG(LA(LC(LS(J))))  &kp LG(LA(LC(LS(C))))  &kp LG(LA(LC(LS(L))))  &none  &none
&none  &none  &none  &none  &none  &none    &kp LG(LA(LC(LS(U))))  &kp LG(LA(LC(LS(F))))  &kp LG(LA(LC(LS(H))))  &kp LG(LA(LS(LC(G))))  &none  &none
                     &none  &none  &none    &none                  &none                  &none
            >;

            label = "rectangle app layer";
        };
    };
};
